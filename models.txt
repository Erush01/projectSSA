%98 training accuracy
model=tf.keras.models.Sequential([
    
    tf.keras.layers.InputLayer(input_shape=(x_train.shape[1],x_train.shape[2])),
    tf.keras.layers.Conv1D(64,kernel_size=3,strides=1,activation='relu',padding='same'),
    tf.keras.layers.Conv1D(64,kernel_size=3,strides=2,activation='relu',padding='same'),
 
    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64,return_sequences=True)),
    tf.keras.layers.BatchNormalization(),
    
    tf.keras.layers.Conv1D(128,kernel_size=5,strides=1,activation='relu',padding='same'),
    tf.keras.layers.Conv1D(128,kernel_size=5,strides=2,activation='relu',padding='same'),
    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(128,return_sequences=True)),
    tf.keras.layers.BatchNormalization(),

    tf.keras.layers.GlobalAveragePooling1D(),
    tf.keras.layers.Dense(128,activation='relu',kernel_regularizer=tf.keras.regularizers.L2(0.1)),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(256,activation='relu',kernel_regularizer=tf.keras.regularizers.L2(0.1)),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(3,activation='softmax')])


%99.35 training accuracy
model=tf.keras.models.Sequential([

    tf.keras.layers.InputLayer(input_shape=(x_train.shape[1],x_train.shape[2])),
    
    tf.keras.layers.Conv1D(64,kernel_size=3,strides=1,activation='relu',padding='same'),
    tf.keras.layers.Conv1D(64,kernel_size=3,strides=2,activation='relu',padding='same'),
    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64,return_sequences=True)),
    tf.keras.layers.BatchNormalization(),
    
    tf.keras.layers.Conv1D(128,kernel_size=5,strides=1,activation='relu',padding='same'),
    tf.keras.layers.Conv1D(128,kernel_size=5,strides=2,activation='relu',padding='same'),
    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(128,return_sequences=True)),
    tf.keras.layers.BatchNormalization(),

    tf.keras.layers.GlobalAveragePooling1D(),
    tf.keras.layers.Dense(128,activation='relu',kernel_regularizer=tf.keras.regularizers.L2(0.01)),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(256,activation='relu',kernel_regularizer=tf.keras.regularizers.L2(0.01)),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(3,activation='softmax')])
